/*
 *
 * EE2024 Project for kicks
 * @author Edward
 * @author Jeremias
 *
 */


#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_timer.h"

/*
 * Include Systick Functions
 */

//#include "LPC17xx.h"
#include "joystick.h"
#include "pca9532.h"
#include "acc.h"
#include "oled.h"
#include "rgb.h"
#include "led7seg.h"

/*
 * Program Constants
 */

const uint8_t ACC_ST_BRIGHT = 50;
const uint8_t ACC_ST_DIM_RELAY = 100;
const uint32_t LS_TS_ST_BRIGHT = 1000;
const uint32_t LS_TS_ST_DIM_RELAY = 3000;

const uint32_t BRIGHT = 800;
const uint32_t HIGH_TEMP = 260;

const char *WELCOME_MESSAGE = "BOOTING";

/*
 * Program Variables
 */

uint32_t reportingTime = 5;
uint32_t distressTime = 1;
uint32_t temperature = 0;
uint8_t accelerationX = 0;
uint8_t accelerationY = 0;
uint8_t accelerationZ = 0;


/**
 * Accelerometer Handler
 */

void SysTick_Handler(void) {
	/*
	 * Parallel control loop
	 *
	 * Sample accelerometer
	 *
	 */
}

/**
 * Synchronous Serial Port (SSP) is a controller that supports the Serial Peripheral Interface (SPI), 4-wire Synchronous Serial Interface (SSI), and Microwire serial buses
 */

static void init_ssp(void)
{
	SSP_CFG_Type SSP_ConfigStruct;
	PINSEL_CFG_Type PinCfg;

	/*
	 * Initialize SPI pin connect
	 * P0.7 - SCK;
	 * P0.8 - MISO
	 * P0.9 - MOSI
	 * P2.2 - SSEL - used as GPIO
	 */

	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);

	// Enable SSP peripheral
	SSP_Cmd(LPC_SSP1, ENABLE);

}

/**
 * Inits I2C
 */

static void init_i2c(void)
{
	PINSEL_CFG_Type PinCfg;

	/* Initialize I2C2 pin connect */
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 11;
	PINSEL_ConfigPin(&PinCfg);

	// Initialize I2C peripheral
	I2C_Init(LPC_I2C2, 100000);

	/* Enable I2C1 operation */
	I2C_Cmd(LPC_I2C2, ENABLE);
}

static void init_GPIO(void)
{
	/*
	 * Initialize button/s
	 *
	 * SW3 TOGGLE
	 * SW4 ALARM OFF
	 * BUZZER - ALARM
	 *
	 */



}

void initSystick() {
	/**
	 * Configure Systick
	 */
	if (SysTick_Config(SystemCoreClock / 1000 * (50))) {
		uint8_t ch = (int) '5';
		led7seg_setChar(ch, 0);
		while (1)
			;

	}
}

int main (void) {

	/**
	 * Initialisation Steps
	 */

	printf(WELCOME_MESSAGE);

	init_i2c();
    init_ssp();
    init_GPIO();

    led7seg_init();
    pca9532_init();
    joystick_init();
    acc_init();
    oled_init();
    temp_init();

    initSystick();

    /*
     * Main Control Loop
     *
     * 1)
     *
     */

    while(TRUE){
    	;
    }


}

void check_failed(uint8_t *file, uint32_t line)
{
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while(1);
}
